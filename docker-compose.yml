version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:16-alpine
    container_name: ml-trading-postgres
    environment:
      POSTGRES_DB: trading_platform
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading-network

  redis:
    image: redis:7-alpine
    container_name: ml-trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading-network

  influxdb:
    image: influxdb:2.7-alpine
    container_name: ml-trading-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: adminpassword
      DOCKER_INFLUXDB_INIT_ORG: trading-platform
      DOCKER_INFLUXDB_INIT_BUCKET: market-data
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - trading-network

  # Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ml-trading-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - trading-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ml-trading-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - trading-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: ml-trading-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trading-network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: ml-trading-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - trading-network

  # ML Platform
  mlflow:
    image: python:3.11-slim
    container_name: ml-trading-mlflow
    working_dir: /mlflow
    command: >
      bash -c "
        pip install mlflow[extras] psycopg2-binary &&
        mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri postgresql://trading_user:trading_password@postgres:5432/trading_platform --default-artifact-root ./artifacts
      "
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    volumes:
      - mlflow_data:/mlflow/artifacts
    networks:
      - trading-network

volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  mlflow_data:

networks:
  trading-network:
    driver: bridge